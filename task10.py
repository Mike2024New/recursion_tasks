"""
задача: двоичное представление числа:
например: 15 ->
16 8 4 2 1
0 1 1 1 1
"""


def binary(x, result: str = None) -> str:
    """
    перевод из десятичной системы счисления в двоичную
    :param x: любое натуральное число
    :param result: накопитель, сюда запишется результат
    :return: исходное число преобразованное в двоичную систему
    ==========================================================
    Пример использования:
        binary(x=10) # -> "1010"
    Обрабатываемые исключения:
    ValueError:
        -Тип x не является типом int
    """
    if not isinstance(x, int):
        raise ValueError(f"Ошибка входного типа, x должен быть int, а на вход подан тип {x}")
    if not result:
        result = ""
    if x == 0:  # базовый случай x равен 0, вернуть строку "0"
        return "0"
    if x == 1:  # базовый случай x равен 1, добавить его в result
        result = "1" + result
        return result
    result = "0" + result if x % 2 == 0 else "1" + result  # если число чётное то "+0" к result, иначе "+1"
    return binary(x // 2, result)


res = binary(10)
print(res)

"""
Перевод числа 13 в двоичную систему:
13/2=6(1)
6/2=3(0)
3/2=1(1)
1/2=0(1)

-> 13 = 1101

16/2=8(0)
8/2=4(0)
4/2=2(0)
2/2=1(0)
1/2=0(1)
-> 16 = 10000

СТЕК ВЫЗОВОВ:
    пример для числа 13:
    binary(13)-1 -> на каждый вызов число x уменьшается на 2 и в следующий вызов передаётся целочисленное частное
        binary(6)-0
            binary(3)-1
                binary(1)-1 |-> базовый случай x=1
                return "1"
            return "10"
        return "101"
    return "1101"
"""
