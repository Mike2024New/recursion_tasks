def factorization(a: int, multipliers: list = None) -> list:
    """
    разложение числа a на простые множители
    :param a: натуральное число больше 1
    :param multipliers: список множителей (этот параметр заполнять не нужно)
    :return: список множителей (если a<2, то возвращается пустой список)
    =====================================================================
    Пример использования:
        factorization(a=24) # результат -> [2, 2, 2, 3]
    =====================================================================
    Обрабатываемые исключения:
    ValueError:
        -передан неправильный тип данных на вход в переменную а
        -a меньше 0
    """
    if not isinstance(a, int) or a < 0:
        raise ValueError(f"a должно быть целым натуральным числом, а передано значение: {a}")
    if not multipliers:
        multipliers = []  # инициализируем список накопитель
    if a == 1 or a < 2:  # базовый случай a = 1
        return multipliers
    i = 2
    while not a % i == 0:  # поиск множителя
        i += 1
    multipliers.append(i)  # добавить множитель в коллекцию
    factorization(a // i, multipliers)  # продолжаем делить число a пока оно не станет равно 1
    return multipliers


"""
factorization(a: int, multipliers: list = None)->list
СТЕК ВЫЗОВОВ:
    для значения 24
    factorization(24) / то есть нужно делить число до тех пор пока оно не поделится без остатка
        factorization(12) -> [2]
            factorization(6) -> [2,2]
                factorization(3) -> [2,2,2]
                    factorization(1) |-> [2,2,2,3] БАЗОВЫЙ СЛУЧАЙ  a==1 или a<2 (если передан такой входной параметр)
                    return [2,2,2,3]
                return [2,2,2,3]
            return [2,2,2,3]
        return [2,2,2,3]
    return [2,2,2,3]

    Идея решения: через цикл подбираем делитель для числа a на которое оно делится без остатка, как найдено число, 
    записываем его в список multipliers. Базовым случаем же будет ситуация когда a==1, или a<2 (это если на вход
    передали число меньше 2 и нет смысла искать для него множители, это вернет пустой список).
"""

if __name__ == '__main__':
    res = factorization(a=24)
    print(res)
