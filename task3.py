"""упражнение проверка строки на палиндромы (то есть строка должна быть симметричная например 'шалаш', это палиндром
 нужна рекурсивная функция которая проверит палиндром строка или нет"""


def is_palindrom(string: str, register: bool = True) -> bool:
    """
    Проверка является ли строка палиндромом, например "шалаш", палиндром, так как это слово зеркально
    :param string: входная строка
    :param register: опциональный параметр, если он включен, то регистер будет учитываться иначе нет.
    :return: True/False в зависимости от результата, True - строка палиндром, False - строка не палиндром.

    =================================================================
    Пример использования:
    is_palindrom(string="шалаш", register=True) | -> результат будет True
    is_palindrom(string="шалАш", register=True) | -> результат будет false так как есть отличие по регистру.
    is_palindrom(string="шалАш", register=False) | -> результат будет false так как проверка регистра выключена.
    """
    if len(string) <= 1:  # строка палиндром
        return True
    if register:
        string = string.lower()
    if string[0] != string[-1]:
        return False
    return is_palindrom(string[1:-1], register)


res = is_palindrom(string="ШАКаШ", register=False)
print(res)

"""
СТЕК ВЫЗОВОВ:
    спуск по стеку вызовов за счёт вызова функции с параметром string у которого на каждую итерацию отнимается первый
    и последний символы, для того, чтобы сделать последовательную проверку последних символов, например "шалаш"->
    "ала"->"л", в данном случае рекурсия дошла до длины строки равной 1 либо 0, то это палиндром, так как все предыдущие
    случаи выдавали ок.
    Также на каждую итерацию, выполняется проверка равен ли первый символ последнему, если нет то функция возвращает
    false, то есть строка не палиндром, например "шалаг", буквы "ш" и "г" не совпадают, значит нужно вернуть false
    
    Положительный исход для строки "шалаш":
    is_palindrom("шалаш")
        is_palindrom("ала")
            is_palindrom("л") | РЕКУРСИВНЫЙ СЛУЧАЙ -> ТОЧКА ВЫХОДА ЕСЛИ ДЛИНА СТРОКИ РАВНА 0 ИЛИ 1
            return True
        return True
    return True
    
    
    Отрицательный исход для строки "шалиш":
    is_palindrom("шалаш")
        is_palindrom("али") | РЕКУРСИВНЫЙ СЛУЧАЙ -> ТОЧКА ВЫХОДА ПОСЛЕДНИЕ ДВА СИМВОЛА НЕ СОВПАДАЮТ, СТРОКА НЕ ПАЛИНДРОМ  
        return False
    return False
            
    То есть структура функции:
    1.Условие которое проверяет строка равна 0 или 1, если да то строка палиндром, так как все пары 
    первый-последний символы до этого были равны. или же если в качестве входа была передана пустая строка или строка 
    из одного символа. Что говорит о том, что строка также является палиндромом.
    
    2.условие которое проверяет равен ли первый символ слова последнему, если да то рекурсивный вызов продолжается до 
    тех пор пока строка не будет равна либо не получится ситуация когда первый символ не равен последнему. Если первый
    символ не равен последнему то остановка всей цепи вызовов и вернуть false, так как строка не палиндром. 
"""
